{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\BottomBar.svelte",
    "..\\src\\PhotoBackground.svelte",
    "..\\src\\Clock.svelte",
    "..\\src\\PhotoSlogan.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import Clock from './Clock.svelte';\r\n    import PhotoSlogan from './PhotoSlogan.svelte';\r\n    \r\n\timport { onMount } from 'svelte';\r\n\tlet time = new Date();\r\n\r\n\tonMount(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\ttime = new Date();\r\n        }, 1000);\r\n    });\r\n\r\n    const timeStringFormatter = (timeObj) => {\r\n        let hoursFormatted = timeObj.getHours();\r\n        if (hoursFormatted === 0) hoursFormatted = 12;\r\n        else if (hoursFormatted > 12) hoursFormatted = hoursFormatted - 12;\r\n\r\n        let minutesFormatted = timeObj.getMinutes().toString().padStart(2, '0');\r\n\r\n        return `${hoursFormatted}:${minutesFormatted}`;\r\n    }\r\n\r\n    const dateStringFormatter = (timeObj) => {\r\n\r\n        const dateStrings = timeObj.toDateString().split(' ');\r\n\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const days_short = days.map( item => item.substr(0,3));\r\n\r\n        const day = days[days_short.indexOf(dateStrings[0])];\r\n        const month = dateStrings[1];\r\n        const date =  dateStrings[2];\r\n        return `${day}, ${month} ${date}`;\r\n    }\r\n\r\n    $: timeString = timeStringFormatter(time);\r\n    $: dateString = dateStringFormatter(time);\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    margin-bottom: 2rem;\r\n    color: white;\r\n    width: 100%;\r\n    line-height: 1em;\r\n    text-shadow: 1px 1px 8px black;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: flex-end;\r\n    flex-direction: row;\r\n}\r\n</style>\r\n\r\n<div>\r\n    <Clock {timeString} />\r\n    <PhotoSlogan photoSlogan={dateString} />\r\n</div>",
    "<script>\n\timport { fade } from 'svelte/transition';\n\timport { photos } from './stores.js';\n\timport { config } from  './config.js';\n\n\tconst SLIDESHOW_INTERVAL = 30;\n\n\tfunction authenticate() {\n\t\tconst authInstance = gapi.auth2.getAuthInstance();\n\n\t\tif (authInstance.isSignedIn.get()) {\n\t\t\tconsole.log(\"User already signed in.\");\n\t\t} else {\n\t\t\t//authInstance.signIn({scope: \"https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata\"})\n\t\t\tauthInstance.signIn({scope: \"https://www.googleapis.com/auth/photoslibrary.readonly\"})\n\t\t\t.then(function() { console.log(\"Sign-in successful\"); },\n\t\t\t\tfunction(err) { console.error(\"Error signing in\", err); });\n\t\t}\n\t\treturn authInstance;\n\t}\n\n\tlet googlePhotosClientLoaded = false;\n\tfunction loadClient() {\n\t\tgapi.client.setApiKey(config.API_KEY);\n\t\treturn gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/photoslibrary/v1/rest\")\n\t\t\t.then(function() { \n\t\t\t\tgooglePhotosClientLoaded = true; \n\t\t\t\tconsole.log(\"GAPI client loaded for API\"); \n\n\t\t\t\tgetPictures();\n\t\t\t},\n\t\t\t\tfunction(err) { console.error(\"Error loading GAPI client for API\", err); });\n\t}\n\n\t// change background image\n\tfunction changeBackgroundImage(imgUrl) {\n\t\tconst img = new Image();\n\n\t\timg.onload = function() {\n\t\t\tdocument.querySelector('html').style.backgroundImage = `url(${img.src})`;\n\t\t};\n\n\t\timg.src = imgUrl;\n\t}\n\n\tfunction displayRandomPhoto() {\n\t\tconst randomPhotoIndex = Math.round(Math.random() * $photos.length);\n\n\t\treturn gapi.client.photoslibrary.mediaItems.get({\n      \t\t\"mediaItemId\": $photos[randomPhotoIndex],\n    \t})\n        .then(\n\t\t\tfunction(response) {\n\t\t\t\t// Handle the results here (response.result has the parsed body).\n\t\t\t\tconsole.log(\"Getting photo URL\", response);\n\t\t\t\tchangeBackgroundImage(`${response.result.baseUrl}=w0-h0`);\n\t\t\t\tschedule_getPictures();\n\t\t\t},\n\t\t\tfunction(err) {\n\t\t\t\tconsole.error(\"Execute error\", err); \n\t\t\t\tschedule_getPictures();\n\t\t\t}\n\t\t);\n \t}\n\n\n\tlet pageToken = '';\n\tlet getPictures_timeout;\n\tconst schedule_getPictures = () => {\n\t\tclearInterval(getPictures_timeout);\n\t\tgetPictures_timeout = setTimeout(getPictures, SLIDESHOW_INTERVAL*1000);\n\t}\n\t// Make sure the client is loaded and sign-in is complete before calling this method.\n\tfunction getPictures() {\n\t\treturn gapi.client.photoslibrary.mediaItems.search({\n\t\t\"resource\": {\n\t\t\t\"pageSize\": 100,\n\t\t\tpageToken\n\t\t}\n\t\t})\n\t\t\t.then(function(response) {\n\t\t\t\t\t// Handle the results here (response.result has the parsed body).\n\t\t\t\t\tconsole.log(\"Increasing photos cache\", response);\n\t\t\t\t\tconst { result } = response;\n\n\t\t\t\t\tconst newPhotoIds = result.mediaItems.map(item => item.id);\n\t\t\t\t\tphotos.update(n => {\n\t\t\t\t\t\treturn Array.from(new Set([...n, ...newPhotoIds]));\n\t\t\t\t\t});\n\n\t\t\t\t\tpageToken = result.nextPageToken;\n\t\t\t\t\t\n\t\t\t\t\tdisplayRandomPhoto();\n\t\t\t\t},\n\t\t\t\tfunction(err) { \n\t\t\t\t\tconsole.error(\"Execute error\", err); \n\t\t\t\t\tschedule_getPictures();\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\tgapi.load(\"client:auth2\", function() {\n\t\tgapi.auth2.init({client_id: config.CLIENT_ID}).then( () => {\n\t\t\tconst authInstance = gapi.auth2.getAuthInstance();\n\t\t\tif (authInstance.isSignedIn.get()) loadClient();\n\t\t});\n\t});\n\t\n\t$: {\n\t\tconsole.log({$photos});\n\t}\n</script>\n\n<style>\n\tdiv.content {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n\n<div class=\"content\" on:click={displayRandomPhoto}>\n{#if googlePhotosClientLoaded}\n\t<!-- <button on:click={getPictures}>execute</button> -->\n{:else}\n\t<h1>You are not authenticated.</h1>\n\t<button on:click={() => authenticate().then(loadClient)}>authorize and load</button>\n\n{/if}\n</div>",
    "<script>\r\n    export let timeString = \"0:00\";\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    font-size: 6rem;\r\n    line-height: 1em;\r\n    margin-left: 2rem;\r\n    text-shadow: 1px 1px 6px black;\r\n}\r\n</style>\r\n\r\n<div>\r\n    {timeString}\r\n</div>",
    "<script>\r\n    export let photoSlogan = \"\";\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    margin-left: auto;\r\n    font-size: 2rem;\r\n    line-height: 1em;\r\n    margin-right: 2rem;\r\n    text-shadow: 1px 1px 2px black;\r\n}\r\n</style>\r\n\r\n<div>\r\n    {photoSlogan}\r\n</div>"
  ],
  "names": [],
  "mappings": "AAyCA,GAAG,cAAC,CAAC,AACD,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAC9B,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,UAAU,CAC3B,WAAW,CAAE,QAAQ,CACrB,cAAc,CAAE,GAAG,AACvB,CAAC;AC4DA,GAAG,QAAQ,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;AChHF,GAAG,cAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAClC,CAAC;ACLD,GAAG,eAAC,CAAC,AACD,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAClC,CAAC"
}
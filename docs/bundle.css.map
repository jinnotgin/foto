{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\PhotoBackground.svelte",
    "..\\src\\BottomBar.svelte",
    "..\\src\\PhotoSlogan.svelte",
    "..\\src\\Clock.svelte",
    "..\\src\\WeatherWidget.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { fade } from 'svelte/transition';\n\timport { config } from  './config.js';\n    import { scheduleFunction } from  './jinFunctions.js';\n\n\tconst SLIDESHOW_INTERVAL = 30;\n\tconst GETNEWPHOTOS_INTERVAL = 60;\n\n\texport let db;\n\tconsole.log({db});\n\n\tfunction authenticate() {\n\t\tconst authInstance = gapi.auth2.getAuthInstance();\n\n\t\tif (authInstance.isSignedIn.get()) {\n\t\t\tconsole.log(\"User already signed in.\");\n\t\t} else {\n\t\t\t//authInstance.signIn({scope: \"https://www.googleapis.com/auth/photoslibrary https://www.googleapis.com/auth/photoslibrary.readonly https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata\"})\n\t\t\tauthInstance.signIn({scope: \"https://www.googleapis.com/auth/photoslibrary.readonly\"})\n\t\t\t.then(function() { console.log(\"Sign-in successful\"); },\n\t\t\t\tfunction(err) { console.error(\"Error signing in\", err); });\n\t\t}\n\t\treturn authInstance;\n\t}\n\n\tlet googlePhotosClientLoaded = false;\n\tfunction loadClient() {\n\t\tgapi.client.setApiKey(config.API_KEY);\n\t\treturn gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/photoslibrary/v1/rest\")\n\t\t\t.then(function() { \n\t\t\t\tgooglePhotosClientLoaded = true; \n\t\t\t\tconsole.log(\"GAPI client loaded for API\"); \n\t\t\t\t\n\t\t\t\tclearOldPhotos();\n\t \t\t\tschedule_displayRandomPhoto(0);\n\t\t\t\tschedule_getPictures(0);\n\t\t\t},\n\t\t\t\tfunction(err) { console.error(\"Error loading GAPI client for API\", err); });\n\t}\n\n\t// change background image\n\tfunction changeBackgroundImage(imgUrl) {\n\t\tconst img = new Image();\n\n\t\timg.onload = function() {\n\t\t\tdocument.querySelector('html').style.backgroundImage = `url(${img.src})`;\n\t\t};\n\n\t\timg.src = imgUrl;\n\t}\n\n\n\tasync function clearOldPhotos() {\n\t\tconst newlyUpdatedPhotos = await db.photos.orderBy('modified').reverse().limit(100).toArray();\n\t\tconst averageModifiedTime = newlyUpdatedPhotos.reduce((accumulator, item) => accumulator + item.modified, 0) / newlyUpdatedPhotos.length\n\t\tconst inactiveTolerance = 60 * 60 * 24 * 7;\n\t\tconsole.log('clearOldPhotos:', {newlyUpdatedPhotos, averageModifiedTime, inactiveTolerance});\n\n\t\tconst thresholdTime = averageModifiedTime - inactiveTolerance;\n\t\tconst deleteTransaction = await db.photos.where('modified').below(thresholdTime).delete();\n\t\tconsole.log('clearOldPhotos:', {deleteTransaction});\n\t};\t\n\n\tconst schedule_displayRandomPhoto = (scheduleSeconds = SLIDESHOW_INTERVAL) => scheduleFunction('displayRandomPhoto', displayRandomPhoto, scheduleSeconds);\n\tasync function displayRandomPhoto() {\n\t\tconst totalNoOfPhotos = await db.photos.count();\n\t\tconst randomPhotoIndex = Math.round(Math.random() * totalNoOfPhotos);\n\t\tconst randomPhotoItem = await db.photos.offset(randomPhotoIndex).limit(1).first();\n\t\tconst randomPhotoId = randomPhotoItem.id;\n\t\tconsole.log('displayRandomPhoto:', {totalNoOfPhotos, randomPhotoIndex, randomPhotoItem, randomPhotoId});\n\n\t\treturn gapi.client.photoslibrary.mediaItems.get({\n      \t\t\"mediaItemId\": randomPhotoId,\n    \t})\n        .then(\n\t\t\tfunction(response) {\n\t\t\t\t// Handle the results here (response.result has the parsed body).\n\t\t\t\tconsole.log(\"Photo data (Google):\", response);\n\t\t\t\tchangeBackgroundImage(`${response.result.baseUrl}=w0-h0`);\n\t\t\t\tschedule_displayRandomPhoto();\n\t\t\t},\n\t\t\tfunction(err) {\n\t\t\t\tconsole.error(\"Execute error\", err); \n\t\t\t\tschedule_displayRandomPhoto(0);\n\t\t\t}\n\t\t);\n\t }\n\n\n\tlet pageToken = '';\n\tconst schedule_getPictures = (scheduleSeconds = GETNEWPHOTOS_INTERVAL) => scheduleFunction('getPictures', getPictures, scheduleSeconds);\n\t// Make sure the client is loaded and sign-in is complete before calling this method.\n\tfunction getPictures() {\n\t\treturn gapi.client.photoslibrary.mediaItems.search({\n\t\t\t\"resource\": {\n\t\t\t\t\"pageSize\": 100,\n\t\t\t\tpageToken\n\t\t\t},\n\t\t}).then(async function(response) {\n\t\t\t// Handle the results here (response.result has the parsed body).\n\t\t\tconsole.log(\"getPictures: \", response);\n\t\t\tconst { result } = response;\n\n\t\t\tconst newPhotoIds = result.mediaItems.filter(item => {\n\t\t\t\tconst validPhotoTest = [\n\t\t\t\t\titem.mimeType.includes('image/'),\n\t\t\t\t\t(item.filename.toLowerCase().includes(\"screenshot\") === false),\n\t\t\t\t\t// check if metadata exists (disabled for now)\n\t\t\t\t\t// (Object.keys(item.mediaMetadata.photo).length > 0),\n\t\t\t\t];\n\n\t\t\t\treturn validPhotoTest.every(item => item === true);\n\t\t\t}).map(item => item.id);\n\n\t\t\tconst nowTime = Math.round((new Date).getTime() / 1000);\n\t\t\tawait db.photos.bulkPut(newPhotoIds.map(item => { \n\t\t\t\treturn {'id': item, 'modified': nowTime};\n\t\t\t})).catch((err) => {\n\t\t\t\tconsole.error(\"Dexie error\", err); \n\t\t\t});;\n\n\t\t\tpageToken = result.nextPageToken;\n\t\t\tschedule_getPictures();\n\t\t}, function(err) { \n\t\t\tconsole.error(\"Execute error\", err); \n\t\t\tschedule_getPictures();\n\t\t});\n\t}\n\n\tgapi.load(\"client:auth2\", function() {\n\t\tgapi.auth2.init({client_id: config.CLIENT_ID}).then( () => {\n\t\t\tconst authInstance = gapi.auth2.getAuthInstance();\n\t\t\tif (authInstance.isSignedIn.get()) loadClient();\n\t\t});\n\t});\n</script>\n\n<style>\n\tdiv.content {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n\n<div class=\"content\" on:click={() => schedule_displayRandomPhoto(0)} on:dblclick={()=>document.body.requestFullscreen()} on:taphold={()=>document.body.requestFullscreen()}>\n{#if googlePhotosClientLoaded}\n\t<!-- <button on:click={getPictures}>execute</button> -->\n{:else}\n\t<h1>You are not authenticated.</h1>\n\t<button on:click={() => authenticate().then(loadClient)}>authorize and load</button>\n\n{/if}\n</div>",
    "<script>\r\n    import Clock from './Clock.svelte';\r\n    import PhotoSlogan from './PhotoSlogan.svelte';\r\n\timport WeatherWidget from './WeatherWidget.svelte';\r\n    \r\n\timport { onMount } from 'svelte';\r\n\tlet time = new Date();\r\n\r\n\tonMount(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\ttime = new Date();\r\n        }, 1000);\r\n    });\r\n\r\n    const timeStringFormatter = (timeObj) => {\r\n        let hoursFormatted = timeObj.getHours();\r\n        if (hoursFormatted === 0) hoursFormatted = 12;\r\n        else if (hoursFormatted > 12) hoursFormatted = hoursFormatted - 12;\r\n\r\n        let minutesFormatted = timeObj.getMinutes().toString().padStart(2, '0');\r\n\r\n        return `${hoursFormatted}:${minutesFormatted}`;\r\n    }\r\n\r\n    const dateStringFormatter = (timeObj) => {\r\n\r\n        const dateStrings = timeObj.toDateString().split(' ');\r\n\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const days_short = days.map( item => item.substr(0,3));\r\n\r\n        const day = days[days_short.indexOf(dateStrings[0])];\r\n        const month = dateStrings[1];\r\n        const date =  dateStrings[2];\r\n        return `${day}, ${month} ${date}`;\r\n    }\r\n\r\n    $: timeString = timeStringFormatter(time);\r\n    $: dateString = dateStringFormatter(time);\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    margin-bottom: 2rem;\r\n    color: white;\r\n    width: 100%;\r\n    line-height: 1em;\r\n    text-shadow: 1px 1px 8px black;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: flex-end;\r\n    flex-direction: row;\r\n}\r\n</style>\r\n\r\n<div>\r\n    <Clock {timeString} />\r\n    <WeatherWidget />\r\n    <PhotoSlogan photoSlogan={dateString} />\r\n</div>",
    "<script>\r\n    export let photoSlogan = \"\";\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    margin-left: auto;\r\n    font-size: 1.5rem;\r\n    line-height: 1em;\r\n    margin-right: 2rem;\r\n    text-shadow: 1px 1px 2px black;\r\n}\r\n</style>\r\n\r\n<div>\r\n    {photoSlogan}\r\n</div>",
    "<script>\r\n    export let timeString = \"0:00\";\r\n</script>\r\n\r\n<style>\r\ndiv {\r\n    font-size: 6rem;\r\n    line-height: 1em;\r\n    margin-left: 2rem;\r\n    text-shadow: 1px 1px 6px black;\r\n}\r\n</style>\r\n\r\n<div>\r\n    {timeString}\r\n</div>",
    "<script>\r\n\timport { onMount } from 'svelte';\r\n    import { config } from  './config.js';\r\n    import { jFetch, scheduleFunction } from  './jinFunctions.js';\r\n    \r\n    const WEATHERINFO_INTERVAL = 60 * 60 * 10;\r\n    let weather = {\r\n        'country': '',\r\n        'temp': 0,\r\n    };\r\n\r\n    let userCoordinates = {};\r\n    const getLocation = () => {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n\r\n        function success(pos) {\r\n            const {coords} = pos;\r\n            const {latitude, longitude, accuracy} = coords;\r\n            console.log('Your current position is:', {latitude, longitude, accuracy: `${accuracy}m`});\r\n        }\r\n\r\n        function error(err) {\r\n            console.warn(`ERROR(${err.code}): ${err.message}`);\r\n        }\r\n\r\n        return new Promise((success, error, options) => {\r\n            navigator.geolocation.getCurrentPosition(success, error, options);\r\n        }).catch(error => false);\r\n    }\r\n\r\n    const schedule_getWeatherData = (scheduleSeconds = WEATHERINFO_INTERVAL) => scheduleFunction('getWeatherData', getWeatherData, scheduleSeconds);\r\n    const getWeatherData = async (cords = userCoordinates) => {\r\n        const {latitude, longitude, accuracy} = cords;\r\n        const weatherService = {\r\n            'default': {\r\n                'current': `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${config.OPENWEATHERMAP_API_KEY}`,\r\n                'forecast': `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${config.OPENWEATHERMAP_API_KEY}`,\r\n            },\r\n            'singapore': {\r\n                'current': `https://api.data.gov.sg/v1/environment/air-temperature`,\r\n                'forecast': `https://api.data.gov.sg/v1/environment/2-hour-weather-forecast`,\r\n            },\r\n        }\r\n\r\n        const weather_owm = async () => {\r\n            const current = jFetch(weatherService.default.current);\r\n            const forecast = jFetch(weatherService.default.forecast);\r\n\r\n            const weatherPromises = await Promise.all([current, forecast]).then(function(values) {\r\n                const current = values[0];\r\n                const forecast = values[1];\r\n                console.log('weather_owm - raw values:', {current, forecast});\r\n\r\n                const weatherData = {\r\n                    'name': current.name,\r\n                    'country': current.sys.country,\r\n                    'temp': current.main.temp / 10,\r\n                    'weather': current.weather[0].main,\r\n                    'forecast': forecast.list[0].weather[0].main,\r\n                };\r\n\r\n                console.log('weather_owm - processed:', {weatherData});\r\n                return weatherData;\r\n            });\r\n\r\n            return weatherPromises;\r\n        }\r\n\r\n        const weather_sg = async () => {\r\n            const current = jFetch(weatherService.singapore.current);\r\n            const forecast = jFetch(weatherService.singapore.forecast);\r\n\r\n            const weatherPromises = await Promise.all([current, forecast]).then(function(values) {\r\n                const current = values[0];\r\n                const forecast = values[1];\r\n                console.log('weather_sg - raw values:', {current, forecast});\r\n\r\n                // FIND CLOSEST STATION using coordinates\r\n                // for now, just assume Woodlands\r\n\r\n                const current_closest_station_index = current.metadata.stations.reduce( (acc, item, idx) => {\r\n                    if (acc === false) {\r\n                        acc = (item.name.toLowerCase().includes('woodlands')) ? idx : false;\r\n                    }\r\n                    return acc;\r\n                }, false);\r\n                \r\n                const forecast_closest_area_index = forecast.area_metadata.reduce( (acc, item, idx) => {\r\n                    if (acc === false) {\r\n                        acc = (item.name.toLowerCase().includes('woodlands')) ? idx : false;\r\n                    }\r\n                    return acc;\r\n                }, false);\r\n\r\n                const current_closest = current.items[0].readings[current_closest_station_index];\r\n                const forecast_closest = forecast.items[0].forecasts[forecast_closest_area_index];\r\n\r\n                console.log('weather_sg - finding closest match:', {current_closest_station_index, current_closest, forecast_closest_area_index, forecast_closest});\r\n\r\n                const weatherData = {\r\n                    'name': forecast_closest.area,\r\n                    'country': 'SG',\r\n                    'temp': current_closest.value,\r\n                    'weather': forecast_closest.forecast,\r\n                    'forecast': forecast_closest.forecast,\r\n                };\r\n\r\n                console.log('weather_sg - processed:', {weatherData});\r\n                return weatherData;\r\n            });\r\n\r\n            return weatherPromises;\r\n        }\r\n\r\n        let weatherData = {};\r\n        if (weather.country === 'SG') {\r\n            weatherData = await weather_sg();\r\n        } else {\r\n            weatherData = await weather_owm();\r\n            if (weatherData.country === 'SG') {\r\n                console.log('Singapore detected! Changing to Singapore api...')\r\n                weatherData = await weather_sg();\r\n            }\r\n        }\r\n        schedule_getWeatherData();\r\n        return weatherData;\r\n    }\r\n    \r\n    \r\n    onMount(() => {\r\n        getLocation().then( async (data) => {\r\n            const {coords} = data;\r\n            userCoordinates = coords;\r\n            \r\n            console.log({coords});\r\n            \r\n            weather = await getWeatherData(coords);\r\n            console.log({weather});\r\n        });\r\n    });\r\n</script>\r\n\r\n\r\n<style>\r\ndiv {\r\n    font-size: 2.5rem;\r\n    line-height: 1em;\r\n    margin-left: 1.5rem;\r\n    margin-right: 2rem;\r\n    text-shadow: 1px 1px 2px black;\r\n}\r\n</style>\r\n\r\n<div>\r\n    {isNaN(weather.temp) ? '-' : `${Math.round(weather.temp)}°`}\r\n</div>"
  ],
  "names": [],
  "mappings": "AA0IC,GAAG,QAAQ,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;ACnGF,GAAG,cAAC,CAAC,AACD,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAC9B,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,UAAU,CAC3B,WAAW,CAAE,QAAQ,CACrB,cAAc,CAAE,GAAG,AACvB,CAAC;AClDD,GAAG,eAAC,CAAC,AACD,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAClC,CAAC;ACND,GAAG,cAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAClC,CAAC;AC0ID,GAAG,eAAC,CAAC,AACD,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,AAClC,CAAC"
}